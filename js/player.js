document.addEventListener("DOMContentLoaded", function () {
    var video = document.getElementById('video');
    var poster = document.getElementById('poster-image');
    var streamURL = "https://stream.tresantenas.cl/hls/stream.m3u8"; // URL completa

    var estaConectado = false; // üîπ Controla si el stream est√° activo
    var intervaloReintento = null; // üîπ Guarda el intervalo de reintentos

    function mostrarPoster() {
        if (estaConectado) {
            console.warn("‚ö†Ô∏è Se√±al perdida. Mostrando p√≥ster.");
            poster.style.display = "block";
            video.style.visibility = "hidden";
            estaConectado = false; // Marca que la se√±al est√° ca√≠da
            iniciarReintento(); // üîπ Inicia reintento solo si la se√±al se perdi√≥
        }
    }

    function ocultarPoster() {
        if (!estaConectado) {
            console.log("‚úÖ Se√±al detectada. Ocultando p√≥ster.");
            poster.style.display = "none";
            video.style.visibility = "visible";
            estaConectado = true; // Marca que la se√±al est√° activa
            detenerReintento(); // üîπ Detiene reintentos innecesarios
        }
    }

    function iniciarHLS() {
        if (Hls.isSupported()) {
            console.log("üé• HLS soportado, intentando cargar transmisi√≥n...");
            var hls = new Hls();
            hls.loadSource(streamURL);
            hls.attachMedia(video);

            hls.on(Hls.Events.MANIFEST_PARSED, function () {
                console.log("üìú MANIFEST PARSED: Intentando reproducir...");
                video.play().then(ocultarPoster).catch(function (error) {
                    console.error("‚ùå Error al intentar reproducir:", error);
                    mostrarPoster();
                });
            });

            hls.on(Hls.Events.ERROR, function (event, data) {
                console.error("‚ö†Ô∏è Error en HLS:", data);
                if (data.fatal) {
                    mostrarPoster();
                    iniciarReintento();
                }
            });

        } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
            console.log("üé• Usando reproducci√≥n nativa HLS.");
            video.src = streamURL;
            video.play().then(ocultarPoster).catch(mostrarPoster);

            video.addEventListener('loadeddata', function () {
                console.log("‚úÖ Video cargado correctamente.");
                ocultarPoster();
            });

            video.addEventListener('error', function () {
                console.error("‚ùå Error en la reproducci√≥n del video.");
                mostrarPoster();
                iniciarReintento();
            });

        } else {
            console.error("‚ùå Tu navegador no soporta HLS.");
            mostrarPoster();
            iniciarReintento();
        }
    }

    function verificarStream() {
        console.log("üîÑ Verificando si el stream est√° disponible...");
        fetch(streamURL, { method: "HEAD", cache: "no-cache" })
            .then(response => {
                if (response.ok && !estaConectado) {
                    console.log("‚úÖ Stream disponible, iniciando reproducci√≥n.");
                    iniciarHLS();
                } else if (!response.ok && estaConectado) {
                    console.warn("‚ö†Ô∏è Stream perdido. Mostrando p√≥ster.");
                    mostrarPoster();
                }
            })
            .catch(() => {
                console.warn("‚ùå Error al verificar el stream.");
                mostrarPoster();
            });
    }

    function iniciarReintento() {
        if (!intervaloReintento) {
            console.warn("üîÑ Iniciando reintentos de conexi√≥n cada 5 segundos...");
            intervaloReintento = setInterval(verificarStream, 5000);
        }
    }

    function detenerReintento() {
        if (intervaloReintento) {
            console.log("‚úÖ Deteniendo reintentos de conexi√≥n.");
            clearInterval(intervaloReintento);
            intervaloReintento = null;
        }
    }

    // Iniciar la verificaci√≥n de stream solo si la p√°gina se carga sin se√±al
    verificarStream();

    // Si el video deja de recibir se√±al, mostrar p√≥ster pero evitar reintentos innecesarios
    video.addEventListener('stalled', mostrarPoster);
    video.addEventListener('waiting', mostrarPoster);
    video.addEventListener('error', mostrarPoster);

    video.addEventListener('playing', function () {
        console.log("üé¨ Video en reproducci√≥n.");
        ocultarPoster();
    });
});
